import typing
import os
import parse_rate
import parse_weather
import sentence_generator as gen
from config import TOKEN
from aiogram.types.callback_query import CallbackQuery
from aiogram.utils.callback_data import CallbackData
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram import Bot, types

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É!")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    commands = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
    commands += '/start - –ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è\n'
    commands += '/help - –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n'
    commands += '/weather - –ü–æ–≥–æ–¥–∞\n'
    commands += '/rate - –ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã\n'
    commands += '/rand - –°–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞'
    await message.reply(commands)


data_cb = CallbackData('id', 'name', 'action')


@dp.message_handler(commands=['weather'])
async def process_weather_command(message: types.message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    moscow = types.InlineKeyboardButton(
        '–ú–æ—Å–∫–≤–∞', callback_data=data_cb.new('moscow', 'temp'))
    peter = types.InlineKeyboardButton(
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', callback_data=data_cb.new('peter', 'temp'))

    markup.add(moscow, peter)
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥!", reply_markup=markup)


@dp.message_handler(commands=['rate'])
async def process_rate_command(message: types.message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    dollar = types.InlineKeyboardButton(
        '–î–æ–ª–ª–∞—Ä –°–®–ê', callback_data=data_cb.new('dollar', 'plot'))
    euro = types.InlineKeyboardButton(
        '–ï–≤—Ä–æ', callback_data=data_cb.new('euro', 'plot'))
    pound = types.InlineKeyboardButton(
        '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤', callback_data=data_cb.new('pound', 'plot'))
    frank = types.InlineKeyboardButton(
        '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫', callback_data=data_cb.new('frank', 'plot'))
    cron = types.InlineKeyboardButton(
        '–®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞', callback_data=data_cb.new('cron', 'plot'))
    yena = types.InlineKeyboardButton(
        '–Ø–ø–æ–Ω—Å–∫–∞—è –ô–µ–Ω–∞', callback_data=data_cb.new('yena', 'plot'))

    markup.add(dollar, euro, pound, frank, cron, yena)
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É!", reply_markup=markup)


@dp.callback_query_handler(data_cb.filter(action='temp'))
async def process_chosen_city_command(call: CallbackQuery, callback_data: typing.Dict[str, str]):
    name = callback_data['name']
    await call.message.edit_text('–°–µ–π—á–∞—Å —Å–¥–µ–ª–∞—é!')
    await process_temp_command(call.message, name)


@dp.callback_query_handler(data_cb.filter(action='plot'))
async def process_chosen_rate_command(call: CallbackQuery, callback_data: typing.Dict[str, str]):
    name = callback_data['name']
    await call.message.edit_text('–°–µ–π—á–∞—Å —Å–¥–µ–ª–∞—é!')
    await process_plot_command(call.message, name)


@dp.message_handler(commands=['rand'])
async def process_generator_command(message: types.Message):
    sentence = gen.generate_sentence()
    await message.reply(sentence)


async def process_temp_command(message: types.Message, name):
    Dict = {"moscow": "–ú–æ—Å–∫–≤–µ", "peter": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"}
    data = parse_weather.temperature(name)
    await bot.send_message(chat_id=message.chat.id, text='–ù—É –∏ –ø–æ–≥–æ–¥–∫–∞ –≤ ' + Dict[name] + ' - —Å–µ–π—á–∞—Å ' + data)


async def process_plot_command(message: types.Message, name):

    img, cap = parse_rate.make_plot(name)
    img.savefig('fig.png')
    await bot.send_photo(chat_id=message.chat.id, photo=open('fig.png', 'rb'), caption=cap)
    if os.path.exists("fig.png"):
        os.remove("fig.png")


@ dp.message_handler()
async def echo_message(message: types.Message):
    await message.reply('–ß—Ç–æ —ç—Ç–æ? –Ø —Ç–∞–∫ –Ω–µ —É–º–µ—é üò™')


if __name__ == '__main__':
    executor.start_polling(dp)
